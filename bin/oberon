#!/usr/bin/env python3
USAGE = """
Control an Oberon server.
"""
import argparse
import sys
import os
import asyncio
import yaml
import logging
import logging.config
import importlib
try:
    import signal
except ImportError:
    signal = None

PACKAGE_PARENT = '..'
SCRIPT_DIR = os.path.dirname(os.path.realpath(os.path.join(os.getcwd(), os.path.expanduser(__file__))))
sys.path.append(os.path.normpath(os.path.join(SCRIPT_DIR, PACKAGE_PARENT)))

ARGS = argparse.ArgumentParser(description=USAGE)
ARGS.add_argument(
    '--config', "-c", action="store", dest='config', default = "",
    help='Configuration file')
ARGS.add_argument(
    '--x', action="store", dest='execute',
    default="start", help='Execute command; start, testconfig, stop, rotate[logs], manhole, defaults to start')

def start_server(loop, config):
    server_class = config["server"]
    idx = server_class.rindex(".")
    pkg = server_class[:idx]
    module = importlib.import_module(server_class[:idx])
    clazz = getattr(module, server_class[idx + 1:])
    server = clazz(config)
    return server.register(loop)

if __name__ == "__main__":
    args = ARGS.parse_args()
    if not os.path.isfile(args.config):
        print("File %s not found"%(args.config))
        ARGS.print_help()
    config = yaml.load(open(args.config))
    logging.config.dictConfig(config["logging"])
    
    loop = asyncio.get_event_loop()

    if signal is not None:
        loop.add_signal_handler(signal.SIGINT, loop.stop)

    if args.execute == "start":
        task = start_server(loop, config)
        loop.run_until_complete(task)
    elif args.execute == "testconfig":
        pass # TODO test server config
    elif args.execute == "stop":
        pass # TODO connect to the server control channel and shutdown
    elif args.execute == "rotate":
        pass # TODO connect to the server control channel and rotate logs
    elif args.execute == "manhole":
        pass # TODO connect to the server manhole
